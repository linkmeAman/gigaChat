name: CI

on:
  push:
    branches: [ main, office ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.8"
  POETRY_VERSION: "1.7.1"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      
      - name: Lint
        run: |
          ruff check .
          black . --check
          mypy app tests

  test:
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
    
    runs-on: ${{ matrix.os }}
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: --name minio --health-cmd "curl -f http://localhost:9000/minio/health/live"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt
      
      - name: Setup test environment
        run: |
          cp .env.example .env
          # Configure test environment variables
          echo "DATABASE_URL=sqlite:///./test.db" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "MINIO_ENDPOINT=localhost:9000" >> .env
          echo "MINIO_ACCESS_KEY=minioadmin" >> .env
          echo "MINIO_SECRET_KEY=minioadmin" >> .env
      
      - name: Run tests
        run: |
          pytest --cov=app --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run security checks
        run: |
          bandit -r app -c pyproject.toml
          safety check